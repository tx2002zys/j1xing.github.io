<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello, World!</title>
    <link href="/2021/08/21/Hello,%20World!/"/>
    <url>/2021/08/21/Hello,%20World!/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/nm.jpg"></p><p>hhhhh</p><p>hh<br><img src="/nm.jpg"><br>h<br>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>001 - Yokan Party（★4）</title>
    <link href="/2021/08/21/atcoder-001/"/>
    <url>/2021/08/21/atcoder-001/</url>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/typical90/tasks/typical90_a">题目链接</a></p><hr><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>有一个长度为L[cm]的木棍。有N个标记点，第i个标记点距左端点的长度为$A_{i}$[cm]。<br>你要从N个标记点中选择K个，将木棍分成K+1块。K+1块中最短的一块的长度为得分。<br>找出划分木棍时得到的分数，使分数达到最大。</p><p>限制条件<br>$ 1 ≤ k ≤ n ≤ 10^{5}$<br>$0 &lt; a_{1} &lt; a_{2}&lt; … &lt; L ≦ 10^{9}$所有的输入都是整数。</p></blockquote><hr><h4 id="二分-最小值最大化"><a href="#二分-最小值最大化" class="headerlink" title="二分(最小值最大化)"></a>二分(最小值最大化)</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a, b) memset(a, b, sizeof(a))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long int</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> endl <span class="hljs-meta-string">&#x27;\n&#x27;</span></span><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; PII;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> inf = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> a[N];<br><span class="hljs-keyword">int</span> n, m, k;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> pre = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">//上一次切的位置、切的次数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] - pre &gt;= x &amp;&amp; m - a[i] &gt;= x) &#123;<br>            cnt++;<br>            pre = a[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt &gt;= k; <span class="hljs-comment">//如果切的次数大于等于k说明此时的长度小了，还能继续扩大</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = m;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;  <span class="hljs-comment">//二分答案，让最小值最大化</span><br>        <span class="hljs-keyword">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))<br>            l = mid;<br>        <span class="hljs-keyword">else</span><br>            r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    cout &lt;&lt; l &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>atcoder</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
